name: Deploy

on:
  push:
    branches:
      - main
  workflow_dispatch:
  pull_request:
    branches:
      - main

jobs:
  # test:
  #   runs-on: ubuntu-latest
  #   name: Run Tests
  #   env:
  #     TESTING: true
  #   steps:
  #     - name: Checkout Repository
  #       uses: actions/checkout@v2

  #     - name: Setup Python
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: "3.10.4"

  #     - name: Setup Python Virtual Environment
  #       run: python3 -m venv python3-virtualenv

  #     - name: Install Dependencies
  #       run: python3-virtualenv/bin/pip install -r requirements.txt

  #     - name: Run Tests
  #       run: ./run_tests.sh

  deploy:
    if: ${{ !github.event.pull_request }}
    runs-on: ubuntu-latest
    name: "Deploy to DigitalOcean Droplet"
    # needs: [test]
    steps:
      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/deploy-key.pem
          chmod 600 ~/.ssh/deploy-key.pem
          cat >>~/.ssh/config <<END
          Host my-vm
            HostName $SSH_IP
            User $SSH_USER
            IdentityFile ~/.ssh/deploy-key.pem
            StrictHostKeyChecking no
          END
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_IP: ${{ secrets.SSH_IP }}

      - name: Deploy site
        run: ssh my-vm '~/redeploy-site.sh'

      # - name: Discord Notification
      #   run: ssh my-vm $'curl ${{ secrets.DISCORD_WEBHOOK }} -d "content=$(docker ps)\nðŸš€ Deployment Successful"'

  # deployment-failure:
  #   runs-on: ubuntu-latest
  #   name: Failed Test
  #   needs: [test, deploy]
  #   if: failure()
  #   steps:
  #     - name: Notification on Discord
  #       run: curl ${{ secrets.DISCORD_WEBHOOK }} -d "content=ðŸš¨ Deployment Failed"
